# Python 3 变量类型
'''
变量存储在内存中的值，这就意味着在创建变量时会在内存中开辟一个空间
基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中
变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符
'''
# ---------------
# 1. 变量赋值
# ---------------
'''
Python 中的变量赋值不需要类型声明
每个变量在内存中创建，都包括变量的标识，名称和数据这些信息
每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建
等号 ( = ) 用来给变量赋值
等号 ( = ) 运算符左边是一个变量名,等号 ( = ) 运算符右边是存储在变量中的值
'''
counter = 110
miles = 10000.0
name = "hello"
print(counter)
print(miles)
print(name)

# 多个变量赋值
a = b = c = 1
d, e, f = 1, 2, "john"
print(f)

# ---------------
# 2. 标准数据类型
# ---------------
'''
内存中存储的数据可以有多种类型
例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储
Python 3 定义了一些标准类型，用于存储各种类型的数据
Python 3 有六个标准的数据类型

Numbers（数字）
String（字符串）
List（列表）
Tuple（元组）
Set ( 集合 )
Dictionary（字典）
'''

# ---------------
# 3. Python 数字
# ---------------
'''
数字数据类型用于存储数值
它们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象
当指定一个值时，Number 对象就会被创建

Python 3 支持四种不同的数字类型:
int (有符号整型 )
float ( 浮点型 )
bool ( 布尔 )
complex ( 复数 )
'''
var1 = 1
var2 = 10
print(var1)
del var1, var2

# ---------------
# 4. Python 3 字符串
# ---------------
'''
字符串 (string )是由数字、字母、下划线组成的一串字符
字符串通常用于表示文本常见的数据
python的字串列表有2种取值顺序:
从左到右索引默认0开始的，最大范围是字符串长度少 1
从右到左索引默认-1开始的，最大范围是字符串开头
如果要实现从字符串中获取一段子字符串的话，可以使用区间运算符 [头下标:尾下标] ，截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾
'''
str1 = 'Hello World!'
print(str1)           # 输出完整字符串
print(str1[0])        # 输出字符串中的第一个字符
print(str1[2:5])      # 输出字符串中第三个至第五个之间的字符串
print(str1[2:])       # 输出从第三个字符开始的字符串
print(str1 * 2 )      # 输出字符串两次
print(str1 + "TEST")  # 输出连接的字符串

# ---------------
# 5. Python 列表
# ---------------
'''
列表 ( list ) 是 Python 中使用最频繁的数据类型
列表可以完成大多数集合类的数据结构实现
列表支持字符，数字，字符串甚至可以包含列表 ( 嵌套 )
列表用 [ ] 标识
列表中值的切割也可以用到变量 [头下标:尾下标]，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾
可以使用加号 ( + ) 运算符连接两个列表 使用星号 (*) 是重复列表元素
'''
list = [ '简单教程', 786 , 2.23, 'john', 70.2 ]
tinylist = [123, 'john']

print(list)               # 输出完整列表
print(list[0])            # 输出列表的第一个元素
print(list[1:3])          # 输出第二个至第三个的元素 
print(list[2:])           # 输出从第三个开始至列表末尾的所有元素
print(tinylist * 2)       # 输出列表两次
print(list + tinylist)    # 打印组合的列表

# ---------------
# 6. Python 元组
# ---------------
'''
元组是另一个数据类型，类似于列表
元组用 () 标识，内部元素用逗号隔开
元组是不可变的，不能二次赋值，相当于只读列表
'''
tuple1 = ( '简单教程', 786 , 2.23, 'john', 70.2 )
tinytuple = (123, 'john')

print ( tuple1 )              # 输出完整元组
print ( tuple1[0]  )          # 输出元组的第一个元素
print ( tuple1[1:3] )         # 输出第二个至第三个的元素 
print ( tuple1[2:] )          # 输出从第三个开始至列表末尾的所有元素
print ( tinytuple * 2 )      # 输出元组两次
print ( tuple1 + tinytuple )  # 打印组合的元组

# ---------------
# 7. Python 集合
# ---------------
'''
集合 (set ) 是一个无序不重复元素的序列
集合 (set ) 的基本作用是进行成员关系测试和删除重复元素
可以使用大括号 { } 或者 set() 函数创建集合
但要注意的是，创建一个空集合必须用 set() 而不是 { } ，因为 { } 是用来创建一个空字典
'''
st = {"C#", "Java", "JavaScript", "Python", "PHP"}
print(st)
print("C#" in st)
print("C++" in st)
st2 = {"Python", "Java"}
print(st2)
print(st - st2)
print(st | st2)
print(st & st2)
print(st ^ st2)
st3 = set()
st3.add("Fabregas")
st3.add(18)
print(st3)

# ---------------
# 8. Python 字典
# ---------------
'''
字典 (dictionary) 是由键值对组成的集合，由键 (key) 和它对应的值 value 组成
列表是有序的对象结合，字典是无序的对象集合
两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取
字典用 { } 标识，可以使用 {} 创建，也可以使用 dict() 函数创建
'''
dict = {}
dict['one'] = "This is one"
dict[2] = "This is two"

tinydict = {'name': 'john','code':6734, 'dept': 'sales'}

print (dict['one'])         # 输出键为'one' 的值
print (dict[2])              # 输出键为 2 的值
print (tinydict)             # 输出完整的字典
print (tinydict.keys())      # 输出所有键
print (tinydict.values())    # 输出所有值

# ---------------
# 9. Python 数据类型转换
# ---------------
'''
——————————————————————————————————————————————————————————————————————————————————
|   函数	               |  描述 
|   int(x [,base])	       |  将 x 转换为一个整数                   
|   float(x)	           |  将 x 转换到一个浮点数
|   complex(real [,imag])  |  创建一个复数
|   str(x)	               |  将对象 x 转换为字符串
|   repr(x)	               |  将对象 x 转换为表达式字符串
|   eval(str)	           |  计算在字符串中的有效 Python 表达式,并返回一个对象
|   tuple(s)	           |  将序列 s 转换为一个元组
|   list(s)	               |  将序列 s 转换为一个列表
|   set(s)	               |  转换为可变集合
|   dict(d)	               |  创建一个字典。d 必须是一个序列 (key,value) 元组
|   frozenset(s)	       |  转换为不可变集合
|   chr(x)	               |  将一个整数转换为一个字符
|   unichr(x)	           |  将一个整数转换为Unicode字符
|   ord(x)	               |  将一个字符转换为它的整数值
|   hex(x)	               |  将一个整数转换为一个十六进制字符串
|   oct(x)	               |  将一个整数转换为一个八进制字符串
——————————————————————————————————————————————————————————————————————————————————
'''
print(float("3.1415926"))
print(str(77905))
print(tuple(list))





